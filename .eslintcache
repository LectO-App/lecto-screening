[{"C:\\dev\\lecto\\lecto-screening\\src\\index.js":"1","C:\\dev\\lecto\\lecto-screening\\src\\App.js":"2","C:\\dev\\lecto\\lecto-screening\\src\\redux\\store.js":"3","C:\\dev\\lecto\\lecto-screening\\src\\components\\Router.js":"4","C:\\dev\\lecto\\lecto-screening\\src\\redux\\slices\\questions.js":"5","C:\\dev\\lecto\\lecto-screening\\src\\redux\\slices\\user.js":"6","C:\\dev\\lecto\\lecto-screening\\src\\redux\\slices\\answers.js":"7","C:\\dev\\lecto\\lecto-screening\\src\\pages\\FinishedTest.js":"8","C:\\dev\\lecto\\lecto-screening\\src\\pages\\Test.js":"9","C:\\dev\\lecto\\lecto-screening\\src\\pages\\Landing.js":"10","C:\\dev\\lecto\\lecto-screening\\src\\pages\\GetStarted.js":"11","C:\\dev\\lecto\\lecto-screening\\src\\pages\\GetStartedForm.js":"12","C:\\dev\\lecto\\lecto-screening\\src\\components\\Header.js":"13","C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\CountItems.js":"14","C:\\dev\\lecto\\lecto-screening\\src\\functions\\exercises.js":"15","C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\PrevPostNumber.js":"16","C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\JoinWithArrows.js":"17","C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\SplitSyllables.js":"18","C:\\dev\\lecto\\lecto-screening\\src\\components\\get-started\\PersonForm.js":"19","C:\\dev\\lecto\\lecto-screening\\src\\components\\get-started\\SchoolForm.js":"20","C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\MultipleChoice.js":"21","C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\SayTheLetters.js":"22","C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\GapQuestion.js":"23"},{"size":645,"mtime":1609331220303,"results":"24","hashOfConfig":"25"},{"size":260,"mtime":1611168814309,"results":"26","hashOfConfig":"25"},{"size":252,"mtime":1609420002316,"results":"27","hashOfConfig":"25"},{"size":766,"mtime":1609356695925,"results":"28","hashOfConfig":"25"},{"size":1649,"mtime":1611170746866,"results":"29","hashOfConfig":"25"},{"size":312,"mtime":1609420002316,"results":"30","hashOfConfig":"25"},{"size":314,"mtime":1609331220305,"results":"31","hashOfConfig":"25"},{"size":478,"mtime":1609331220303,"results":"32","hashOfConfig":"25"},{"size":2194,"mtime":1611169637801,"results":"33","hashOfConfig":"25"},{"size":886,"mtime":1609331220304,"results":"34","hashOfConfig":"25"},{"size":1492,"mtime":1609331220303,"results":"35","hashOfConfig":"25"},{"size":999,"mtime":1609331220303,"results":"36","hashOfConfig":"25"},{"size":258,"mtime":1609331220296,"results":"37","hashOfConfig":"25"},{"size":1200,"mtime":1611169936230,"results":"38","hashOfConfig":"25"},{"size":2189,"mtime":1611167487386,"results":"39","hashOfConfig":"25"},{"size":2017,"mtime":1609331220300,"results":"40","hashOfConfig":"25"},{"size":2475,"mtime":1609331220299,"results":"41","hashOfConfig":"25"},{"size":1522,"mtime":1609331220300,"results":"42","hashOfConfig":"25"},{"size":2490,"mtime":1609331220301,"results":"43","hashOfConfig":"25"},{"size":646,"mtime":1609331220301,"results":"44","hashOfConfig":"25"},{"size":1026,"mtime":1611169006557,"results":"45","hashOfConfig":"25"},{"size":1407,"mtime":1611171178340,"results":"46","hashOfConfig":"25"},{"size":559,"mtime":1611150952317,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"68mumg",{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\dev\\lecto\\lecto-screening\\src\\index.js",[],["98","99"],"C:\\dev\\lecto\\lecto-screening\\src\\App.js",["100","101"],"C:\\dev\\lecto\\lecto-screening\\src\\redux\\store.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\components\\Router.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\redux\\slices\\questions.js",["102"],"C:\\dev\\lecto\\lecto-screening\\src\\redux\\slices\\user.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\redux\\slices\\answers.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\pages\\FinishedTest.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\pages\\Test.js",["103","104","105"],"C:\\dev\\lecto\\lecto-screening\\src\\pages\\Landing.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\pages\\GetStarted.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\pages\\GetStartedForm.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\components\\Header.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\CountItems.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\functions\\exercises.js",["106","107","108"],"C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\PrevPostNumber.js",["109"],"import React, { useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst PrevPostNumber = props => {\r\n\tconst { info, setCurrentAnswer } = props;\r\n\tconst exercise = props.exercise.exercise;\r\n\tconsole.log(exercise);\r\n\r\n\tconst [numbers, setNumbers] = useState({ before: null, after: null });\r\n\r\n\tuseEffect(() => {\r\n\t\tif (numbers.before && numbers.after) {\r\n\t\t\tconst correctPrevAndPost = { ...exercise };\r\n\t\t\tdelete correctPrevAndPost.number;\r\n\t\t\tconst correct = Object.entries(exercise).every(([key, value]) => numbers[key] === value);\r\n\t\t\tconsole.log({ correct, exercise, numbers });\r\n\t\t\tsetCurrentAnswer({ ableToContinue: true, answer: numbers, correct });\r\n\t\t} else {\r\n\t\t\tconsole.log('nosepuede');\r\n\t\t\tsetCurrentAnswer({ ableToContinue: false });\r\n\t\t}\r\n\t}, [numbers]);\r\n\r\n\treturn (\r\n\t\t<motion.div\r\n\t\t\tclassName='prev-post-container test-exercise-container'\r\n\t\t\texit={{ transform: 'translateX(-100vw)' }}\r\n\t\t\tanimate={{ transform: 'translateX(0vw)' }}\r\n\t\t\tinitial={{ transform: 'translateX(100vw)' }}\r\n\t\t\ttransition={{ easing: 'linear' }}\r\n\t\t>\r\n\t\t\t<p className='instruction'>{info.instructions[0]}</p>\r\n\t\t\t<div className='numbers'>\r\n\t\t\t\t<div className='number-input'>\r\n\t\t\t\t\t<div className='number'>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\t\tname='prev'\r\n\t\t\t\t\t\t\tid='prev'\r\n\t\t\t\t\t\t\tonChange={e => setNumbers(value => ({ ...value, before: +e.target.value }))}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<label htmlFor='prev' className='label'>\r\n\t\t\t\t\t\tAnterior\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='number'>{exercise.number}</div>\r\n\t\t\t\t<div className='number-input'>\r\n\t\t\t\t\t<div className='number'>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\t\tname='post'\r\n\t\t\t\t\t\t\tid='post'\r\n\t\t\t\t\t\t\tonChange={e => setNumbers(value => ({ ...value, after: +e.target.value }))}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<label htmlFor='post' className='label'>\r\n\t\t\t\t\t\tPosterior\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</motion.div>\r\n\t);\r\n};\r\n\r\nexport default PrevPostNumber;\r\n","C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\JoinWithArrows.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\SplitSyllables.js",["110"],"import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst SplitSyllables = props => {\r\n\tconst { info, setCurrentAnswer } = props;\r\n\tconst exercise = props.exercise.exercise;\r\n\r\n\tconst [modifiedWord, setModifiedWord] = useState(exercise.word);\r\n\r\n\tconst isCorrect = () => {\r\n\t\tconst userSplitted = modifiedWord.toLowerCase().split('-');\r\n\r\n\t\tconst checkArrayEquality = (arr1, arr2) =>\r\n\t\t\tarr1.length === arr2.length &&\r\n\t\t\tarr1.every(function (this_i, i) {\r\n\t\t\t\treturn this_i === arr2[i];\r\n\t\t\t});\r\n\r\n\t\treturn checkArrayEquality(userSplitted, exercise.splitted);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst wordWasModified = modifiedWord.toLowerCase() !== exercise.word.toLowerCase();\r\n\t\tsetCurrentAnswer({\r\n\t\t\tableToContinue: wordWasModified,\r\n\t\t\tcorrect: isCorrect(),\r\n\t\t\tanswer: modifiedWord.toLowerCase().split('-'),\r\n\t\t});\r\n\t}, [modifiedWord]);\r\n\r\n\treturn (\r\n\t\t<motion.div\r\n\t\t\tclassName='split-syllables-container test-exercise-container'\r\n\t\t\texit={{ transform: 'translateX(-100vw)' }}\r\n\t\t\tanimate={{ transform: 'translateX(0vw)' }}\r\n\t\t\tinitial={{ transform: 'translateX(100vw)' }}\r\n\t\t\ttransition={{ easing: 'linear' }}\r\n\t\t>\r\n\t\t\t<p className='instruction'>{info.instructions[0]}</p>\r\n\t\t\t<img src={exercise.image} className='image' alt='Imagen' />\r\n\t\t\t<input\r\n\t\t\t\tautoComplete='off'\r\n\t\t\t\tclassName='word-to-split'\r\n\t\t\t\tdefaultValue={exercise.word.toUpperCase()}\r\n\t\t\t\tonChange={e => setModifiedWord(e.target.value)}\r\n\t\t\t/>\r\n\t\t</motion.div>\r\n\t);\r\n};\r\n\r\nexport default SplitSyllables;\r\n","C:\\dev\\lecto\\lecto-screening\\src\\components\\get-started\\PersonForm.js",["111"],"import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst PersonForm = props => {\r\n\tconst { register, handleSubmit, errors } = useForm();\r\n\r\n\tconst emailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\r\n\r\n\tconst history = useHistory();\r\n\tconst handleSubmitForm = () => {\r\n\t\thistory.push('/test');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form className='inputs' onSubmit={handleSubmit(handleSubmitForm)}>\r\n\t\t\t<div className='input-group'>\r\n\t\t\t\t<label className='label' htmlFor='email'>\r\n\t\t\t\t\tCorreo electrónico para enviar los resultados\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tref={register({ required: true, pattern: emailRegex })}\r\n\t\t\t\t\tclassName='input'\r\n\t\t\t\t\tname='email'\r\n\t\t\t\t\tid='email'\r\n\t\t\t\t\ttype='email'\r\n\t\t\t\t/>\r\n\t\t\t\t{errors.email && <span className='error'>Ingrese un correo electrónico válido</span>}\r\n\t\t\t</div>\r\n\t\t\t<div className='group'>\r\n\t\t\t\t<div className='input-group'>\r\n\t\t\t\t\t<label className='label' htmlFor='name'>\r\n\t\t\t\t\t\tNombre completo del participante\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input ref={register({ required: true })} className='input' name='name' id='name' type='text' />\r\n\r\n\t\t\t\t\t{errors.name && <span className='error'>Ingrese su nombre completo</span>}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='input-group tiny'>\r\n\t\t\t\t\t<label className='label' htmlFor='age'>\r\n\t\t\t\t\t\tEdad del participante\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input ref={register({ required: true })} className='input' name='age' id='age' type='number' min='0' />\r\n\t\t\t\t\t{errors.age && <span className='error'>Ingrese una edad</span>}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className='checkbox'>\r\n\t\t\t\t<input ref={register} type='checkbox' name='personal-check' id='personal-check' className='check' />\r\n\t\t\t\t<label htmlFor='personal-check' className='label'>\r\n\t\t\t\t\tCorroboración en persona\r\n\t\t\t\t</label>\r\n\t\t\t\t<div className='info'>\r\n\t\t\t\t\t<div className='icon'>?</div>\r\n\t\t\t\t\t<div className='tooltip'>Esto es una explicación de la corroboración</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<button type='submit' className='button'>\r\n\t\t\t\tContinuar\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default PersonForm;\r\n","C:\\dev\\lecto\\lecto-screening\\src\\components\\get-started\\SchoolForm.js",[],"C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\MultipleChoice.js",["112"],"C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\SayTheLetters.js",["113","114","115"],"C:\\dev\\lecto\\lecto-screening\\src\\components\\exercises\\GapQuestion.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":4,"column":10,"nodeType":"122","messageId":"123","endLine":4,"endColumn":21},{"ruleId":"120","severity":1,"message":"124","line":4,"column":23,"nodeType":"122","messageId":"123","endLine":4,"endColumn":34},{"ruleId":"120","severity":1,"message":"125","line":1,"column":23,"nodeType":"122","messageId":"123","endLine":1,"endColumn":29},{"ruleId":"120","severity":1,"message":"126","line":28,"column":8,"nodeType":"122","messageId":"123","endLine":28,"endColumn":15},{"ruleId":"120","severity":1,"message":"127","line":32,"column":8,"nodeType":"122","messageId":"123","endLine":32,"endColumn":16},{"ruleId":"128","severity":1,"message":"129","line":44,"column":5,"nodeType":"130","endLine":44,"endColumn":7,"suggestions":"131"},{"ruleId":"120","severity":1,"message":"132","line":5,"column":8,"nodeType":"122","messageId":"123","endLine":5,"endColumn":16},{"ruleId":"120","severity":1,"message":"133","line":7,"column":7,"nodeType":"122","messageId":"123","endLine":7,"endColumn":27},{"ruleId":"120","severity":1,"message":"134","line":41,"column":8,"nodeType":"122","messageId":"123","endLine":41,"endColumn":17},{"ruleId":"128","severity":1,"message":"135","line":22,"column":5,"nodeType":"130","endLine":22,"endColumn":14,"suggestions":"136"},{"ruleId":"128","severity":1,"message":"137","line":29,"column":5,"nodeType":"130","endLine":29,"endColumn":19,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":8,"column":21,"nodeType":"141","messageId":"142","endLine":8,"endColumn":449},{"ruleId":"120","severity":1,"message":"143","line":6,"column":10,"nodeType":"122","messageId":"123","endLine":6,"endColumn":14},{"ruleId":"120","severity":1,"message":"144","line":9,"column":8,"nodeType":"122","messageId":"123","endLine":9,"endColumn":15},{"ruleId":"120","severity":1,"message":"145","line":13,"column":20,"nodeType":"122","messageId":"123","endLine":13,"endColumn":32},{"ruleId":"128","severity":1,"message":"146","line":24,"column":5,"nodeType":"130","endLine":24,"endColumn":7,"suggestions":"147"},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'nanoid' is defined but never used.","'history' is assigned a value but never used.","'finished' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'questions'. Either include them or remove the dependency array.","ArrayExpression",["150"],"'JSONTest' is defined but never used.","'randomBetweenNumbers' is assigned a value but never used.","'finalTest' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'exercise' and 'setCurrentAnswer'. Either include them or remove the dependency array.",["151"],"React Hook useEffect has missing dependencies: 'exercise.word', 'isCorrect', and 'setCurrentAnswer'. Either include them or remove the dependency array.",["152"],"no-control-regex","Unexpected control character(s) in regular expression: \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e, \\x01, \\x08, \\x0b, \\x0c, \\x0e, \\x1f, \\x01, \\x09, \\x0b, \\x0c, \\x0e.","Literal","unexpected","'info' is assigned a value but never used.","'current' is assigned a value but never used.","'setStartTime' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'endTime', and 'startTime'. Either include them or remove the dependency array.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [dispatch, questions]",{"range":"162","text":"163"},"Update the dependencies array to be: [exercise, numbers, setCurrentAnswer]",{"range":"164","text":"165"},"Update the dependencies array to be: [exercise.word, isCorrect, modifiedWord, setCurrentAnswer]",{"range":"166","text":"167"},"Update the dependencies array to be: [dispatch, endTime, startTime]",{"range":"168","text":"169"},[1551,1553],"[dispatch, questions]",[786,795],"[exercise, numbers, setCurrentAnswer]",[868,882],"[exercise.word, isCorrect, modifiedWord, setCurrentAnswer]",[828,830],"[dispatch, endTime, startTime]"]